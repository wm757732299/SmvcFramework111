<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-4.1.xsd">

	<!-- 认证异常 -->
	<bean id="loginUrlAuthenticationEntryPoint" class="com.wm.security.AjaxLoginUrlAuthenticationEntryPoint">
		<constructor-arg name="loginFormUrl" value="/login.html" />
	</bean>


	<security:http security="none" pattern="/index*" />
	<security:http security="none" pattern="/mp4/**" />
	<security:http security="none" pattern="/main/web/*" />
	<!--<security:http security="none" pattern="/web/*/*" /> -->
	<security:http security="none" pattern="/*/web/*" />
	
	<security:http security="none" pattern="/app/**/website/**" />
	<security:http security="none" pattern="/app/**/plugin/**" />
	<security:http security="none" pattern="/login*" />
	<security:http security="none" pattern="/app/**/css/**" />
	<security:http security="none" pattern="/app/**/images/**" />
	<security:http auto-config="true"
		entry-point-ref="loginUrlAuthenticationEntryPoint">
		<!-- 配置不需要认证过滤的地址 -->
  		<!--  <security:intercept-url pattern="/web/*/*" access="isAnonymous()"/>   -->
		<!-- 配置认证过滤的地址 -->
		<security:intercept-url pattern="/**"
			access="hasAnyRole('ROLE_SUPER','ROLE_USER')" />

		<!-- 登录 -->
		<security:form-login login-page="/login.html"
			login-processing-url="/main/login.wmctl" username-parameter="uAccount"
			password-parameter="uPwd" authentication-failure-url="/login.html?loginError=error"
			default-target-url="/main/admin.wmctl" always-use-default-target="true" />

		<!-- 退出登录 -->
		<security:logout logout-url="/main/logout.wmctl"
			logout-success-url="/login.html" />

		<!-- 拒绝访问处理 -->
		<security:access-denied-handler
			error-page="/common/accessDenied.ctl" />

		<!-- "记住我"功能，采用持久化策略（将用户的登录信息存放在数据库表中） -->
		<!--<security:remember-me data-source-ref="dataSource" /> -->

		<!-- 增加一个自定义的filter，放在FILTER_SECURITY_INTERCEPTOR之前， 实现用户、角色、权限、资源的数据库管理。 
			<security:custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" 
			/> -->

		<!-- 允许页面嵌套在ifram中 -->
		<security:headers>
			<security:frame-options policy="SAMEORIGIN" />
		</security:headers>
		<!-- 不使用csrf 否则post请求会被拦截 -->
		<security:csrf disabled="true" />
	</security:http>

	<!-- 用户的密码加密或解密 -->
	<bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />

	<!-- 认证管理器 -->
	<security:authentication-manager alias="authenticationManager">
		<!-- 权限提供者 -->
		<security:authentication-provider
			user-service-ref="userDetailsService">
			<!-- <security:password-encoder ref="passwordEncoder"> -->
			<!-- <security:salt-source user-property="username" /> -->
			<!-- </security:password-encoder> -->
		</security:authentication-provider>
	</security:authentication-manager>


	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<bean id="accessDecisionManager" class="com.wm.security.AccessDecisionManagerImpl" />

	<!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色去访问。 <bean id="securityMetadataSource" 
		class="com.dfratings.web.security.InvocationSecurityMetadataSourceImpl" /> -->
	<!-- 一个自定义的filter，必须包含authenticationManager, accessDecisionManager,securityMetadataSource三个属性。 
		<bean id="myFilter" class="com.dfratings.web.security.SecurityInterceptor"> 
		<property name="authenticationManager" ref="authenticationManager" /> <property 
		name="accessDecisionManager" ref="accessDecisionManager" /> <property name="securityMetadataSource" 
		ref="securityMetadataSource" /> </bean> -->

	<!-- 开启日志 -->
	<bean id="loggerListener"
		class="org.springframework.security.authentication.event.LoggerListener" />

	<bean id="authorizationListener"
		class="org.springframework.security.access.event.LoggerListener" />

</beans>