<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
	http://www.springframework.org/schema/cache
	http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
	http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task-4.3.xsd">

	<!-- 资源文件配置 -->
	<bean id="propertiesBean"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>
					classpath:com/wm/config/properties/config.properties
				</value>
				<value>
					classpath:com/wm/config/properties/redis.properties
				</value>
			</list>
		</property>
		<property name="fileEncoding">
			<value>UTF-8</value>
		</property>
	</bean>

	<!-- 组件扫描      自动扫描(自动注入) -->
	<context:annotation-config />
	<context:component-scan base-package="com.wm.annotation" />
	<context:component-scan base-package="com.wm.common.db" />
	<context:component-scan base-package="com.wm.mapper" />
	<context:component-scan base-package="com.wm.service.impl" />
	<!-- 	定时作业调度 -->
	<context:component-scan base-package="com.wm.timetask" />
    <!-- 	加入task引入 -->
	<task:annotation-driven/>

	<!-- 数据源 -->
	<bean id="dataSource1" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		scope="singleton" destroy-method="close">
		<property name="driverClass" value="${c3p0.driverClass}" />
		<property name="jdbcUrl" value="${c3p0.db1.jdbcUrl}" />
		<property name="user" value="${c3p0.db1.user}" />
		<property name="password" value="${c3p0.db1.password}" />

		<property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
		<property name="minPoolSize" value="${c3p0.minPoolSize}" />
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}" />

		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
		<property name="maxIdleTimeExcessConnections" value="${c3p0.maxIdleTimeExcessConnections}" />

		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}" />
		<property name="acquireRetryDelay" value="${c3p0.acquireRetryDelay}" />
		<property name="checkoutTimeout" value="${c3p0.checkoutTimeout}" />

		<property name="autoCommitOnClose" value="${c3p0.autoCommitOnClose}"></property>
	</bean>

	<!-- 数据源 -->
	<bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		scope="singleton" destroy-method="close">
		
		<property name="driverClass" value="${c3p0.driverClass}" />
		<property name="jdbcUrl" value="${c3p0.db1.jdbcUrl}" />
		<property name="user" value="${c3p0.db1.user}" />
		<property name="password" value="${c3p0.db1.password}" />

		<property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
		<property name="minPoolSize" value="${c3p0.minPoolSize}" />
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}" />

		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
		<property name="maxIdleTimeExcessConnections" value="${c3p0.maxIdleTimeExcessConnections}" />

		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}" />
		<property name="acquireRetryDelay" value="${c3p0.acquireRetryDelay}" />
		<property name="checkoutTimeout" value="${c3p0.checkoutTimeout}" />

		<property name="autoCommitOnClose" value="${c3p0.autoCommitOnClose}"></property>
	</bean>

	<bean id="dataSource" class="com.wm.common.db.MultipleDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="DSK1" value-ref="dataSource1" />
				<entry key="DSK2" value-ref="dataSource2" />
			</map>
		</property>
<!-- 		<property name="defaultTargetDataSource" ref="dataSource2"></property> -->
	</bean>

	<!-- 配置sessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="configLocation"
			value="classpath:com/wm/config/spring-mybatis.xml" />
	</bean>

	<!--  redis配置 -->
 	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxIdle" value="${redis.maxIdle}" />  
        <property name="maxTotal" value="${redis.maxActive}" />  
        <property name="maxWaitMillis" value="${redis.maxWait}" />  
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
    </bean>  
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
    <constructor-arg ref="jedisPoolConfig" />   
        <property name="hostName" value="${redis.host}" />  
    	<property name="port" value="${redis.port}" />  
<!--         p:password="${redis.pass}"   -->
	</bean> 
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">  
        <property name="connectionFactory"   ref="connectionFactory" />  
    </bean>


	<!-- 扫描mybatis mappers -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.wm.mapper" />
		<!-- 扫描带指定注解Mapper，与markerInterface取的是并集 -->
		<property name="annotationClass"
			value="com.wm.mapper.annotation.MybatisMapper" />
		<!-- <property name="markerInterface" value="" /> -->
		<!-- 在多个数据源的时候才使用 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 使用注解配置事务拦截 -->
	<!-- 事务传播特性 -->
	<!-- PROPAGATION_REQUIRED 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 -->
	<!-- PROPAGATION_SUPPORTS 支持当前事务，如果当前没有事务，就以非事务方式执行。 -->
	<!-- PROPAGATION_MANDATORY 支持当前事务，如果当前没有事务，就抛出异常。 -->
	<!-- PROPAGATION_REQUIRES_NEW 新建事务，如果当前存在事务，把当前事务挂起。 -->
	<!-- PROPAGATION_NOT_SUPPORTED 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 -->
	<!-- PROPAGATION_NEVER 以非事务方式执行，如果当前存在事务，则抛出异常。 -->
	<!-- 事务隔离级别 -->
	<!-- DEFAULT 使用数据库的默认隔离级别 -->
	<!-- READ_UNCOMMITTED 读取未提交数据(会出现脏读, 不可重复读)。oracle不支持 -->
	<!-- READ_COMMITTED 读取已提交数据(会出现不可重复读和幻读)。 oracle支持 -->
	<!-- REPEATABLE_READ 可重复读(会出现幻读)。 oracle不支持 -->
	<!-- SERIALIZABLE 串行化。 oralce支持 -->
	<!-- proxy-target-class=ture基于类的代理（CGLIB），否则基于接口的代理（JDK） -->
	<!-- order="2"限定了事务在数据源切换后再开启 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" order="2" />

	<!-- 启用aop注解 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />


<!-- 拦截器方式配置事务  (另一种事务配置方式，非注解)
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="append*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair" propagation="REQUIRED" />
			<tx:method name="delAndRepair" propagation="REQUIRED" />
 
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />
 
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* sy.service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>

-->








	<!-- 配置ehcache -->
	<bean id="cacheManagerFactory"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
		p:configLocation="classpath:com/wm/config/ehcache.xml"
		p:shared="false" />

	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
		p:cacheManager-ref="cacheManagerFactory" />

	<!-- 启用缓存注解功能 -->
	<cache:annotation-driven cache-manager="cacheManager" />
</beans>
